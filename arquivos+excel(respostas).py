# -*- coding: utf-8 -*-
"""Arquivos+Excel(Respostas).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kbcn13KwmJLo2IPpgb7B1sBv_vxSCOpd

fonte: https://www.kaggle.com/arjunprasadsarkhel/2021-olympics-in-tokyo

### Bibliotecas
"""

import pandas as pd
from google.oauth2 import service_account
from functools import reduce

"""### Extração"""

atletas = pd.read_excel('Athletes.xlsx')

atletas.head()

atletas.NOC.nunique(), atletas.Discipline.nunique()

treinadores = pd.read_excel('Coaches.xlsx')

treinadores.head()

treinadores.Event.value_counts()

treinadores.NOC.nunique(), treinadores.Discipline.nunique()

ent_gen = pd.read_excel('EntriesGender.xlsx')

ent_gen.head()

medalhas = pd.read_excel('Medals.xlsx')

medalhas.head(13)

medalhas['Team/NOC'].nunique()

times = pd.read_excel('Teams.xlsx')

times.head()

times.NOC.nunique(), times.Discipline.nunique()

times.Name.value_counts()

times.Event.value_counts()

"""### Transformação

#### atletas por modalidade por país
"""

atletas.head()

atletas_disc = atletas.groupby(['NOC', 'Discipline'])['Name'].nunique()

atletas_disc

atletas_disc = pd.DataFrame(atletas_disc).reset_index().rename(columns={'Name': 'numero_atletas', 
                                                                        'Discipline': 'modalidade', 
                                                                        'NOC': 'pais'})

"""#### Treinadores por modalidade e país"""

treinadores.head()

treinadores_disc = pd.DataFrame(treinadores.groupby(['NOC', 'Discipline'])['Name'].nunique()).\
reset_index().rename(columns={'Name': 'numero_treinadores', 
                              'Discipline': 'modalidade', 
                              'NOC': 'pais'})

treinadores_disc

"""#### Times por disciplina por país"""

times.head()

times['categoria'] = times.Event.apply(lambda x: 'Masculino' if 'Men' in x 
                                       else ('Feminino' if 'Women' in x 
                                             else ('Misto' if 'Mixed' in x 
                                                   else 'Outros')))

times.tail()

times.categoria.value_counts()

times_masc = pd.DataFrame(times[times.categoria == 'Masculino'].groupby(['NOC', 'Discipline'])['Name'].nunique()).\
reset_index().rename(columns={'Name': 'times_masculinos', 
                              'Discipline': 'modalidade', 
                              'NOC': 'pais'})

times_fem = pd.DataFrame(times[times.categoria == 'Feminino'].groupby(['NOC', 'Discipline'])['Name'].nunique()).\
reset_index().rename(columns={'Name': 'times_femininos', 
                              'Discipline': 'modalidade', 
                              'NOC': 'pais'})

times_misto = pd.DataFrame(times[times.categoria == 'Misto'].groupby(['NOC', 'Discipline'])['Name'].nunique()).\
reset_index().rename(columns={'Name': 'times_mistos', 
                              'Discipline': 'modalidade', 
                              'NOC': 'pais'})

times_outros = pd.DataFrame(times[times.categoria == 'Outros'].groupby(['NOC', 'Discipline'])['Name'].nunique()).\
reset_index().rename(columns={'Name': 'times_outros', 
                              'Discipline': 'modalidade', 
                              'NOC': 'pais'})

times_masc

times_fem

times_misto

times_outros.shape

"""#### Juntando tabelas"""

data_frames = [atletas_disc, 
               treinadores_disc, 
               times_masc, 
               times_fem, 
               times_misto, 
               times_outros]

df_final = reduce(lambda left, right: pd.merge(left, 
                                               right, on=['pais', 'modalidade'], 
                                               how='outer'), 
                  data_frames)

df_final

df_final = reduce(lambda left, right: pd.merge(left, 
                                               right, on=['pais', 'modalidade'], 
                                               how='outer'), 
                  data_frames).fillna(0)

df_final

df_final[df_final.pais == 'Brazil']

"""### Carregamento dos Dados"""

credentials = service_account.Credentials.from_service_account_file(filename='GBQ.json', 
                                                                    scopes=["https://www.googleapis.com/auth/cloud-platform"])

df_final.to_gbq(credentials=credentials, 
                destination_table='curso_etl.etl_excel', 
                if_exists='replace')